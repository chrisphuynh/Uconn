import numpy as np
import matplotlib.pyplot as plt
import scipy.fftpack
import check_lab03 as p
plt.rcParams.update({'font.size': 22})
plt.rcParams['lines.linewidth'] = 3
pi=np.pi
%matplotlib notebook
data=np.loadtxt('./f101.lvm',delimiter='\t')
t=data[:,0]
y=data[:,1]

#t1=22.271
#t2=22.5681
#ind1= np.where(t >t1)
#ind2=np.where(t >t2)
#i1 = ind1[0][0]
#i2 = ind2[0][0]

plt.figure()
plt.plot(t,y,'.-')
plt.xlabel('time (s)')
plt.ylabel('microstrain');

data=np.loadtxt('./f100.lvm',delimiter='\t')
t=data[:,0]
y=data[:,1]

plt.figure()
plt.plot(t,y,'.-')
plt.xlabel('time (s)')
plt.ylabel('microstrain')

def FFT(i1, i2, t, y):  
    '''use the NumPy fft to transform a data set from time-signal -> freq-amplitude
    arguments:
    ----------
    i1: first index in the window
    i2: last index in the window
    t: time values, default is t
    y: signal values, default is y
    output:
    -------
    f: frequency (x-axis in FFT)
    Y: amplitude (y-axis in FFT)
    '''
    ts=t[i1:i2];ys=y[i1:i2] 
    print(len(ts))
    Y=2/len(ts)*np.fft.fft(ys)                                                                                     
    f= np.linspace(0,len(ts)/(max(ts)-min(ts)),len(Y))                                                             
    return f,Y

i1=round(8.2*101)
i2=round(9.9*101)
data=np.loadtxt('./f101.lvm',delimiter='\t')
t=data[:,0]
y=data[:,1]
y=y-np.mean(y)
f,Y = FFT(i1, i2,t,y)

#i3 = round(11.9*403)
#i4 = round(13*403)
#data=np.loadtxt('./f403.lvm',delimiter='\t')
#t1=data[:,0]
#y1=data[:,1]
#y1=y1-np.mean(y1)
#f1,Y1 = FFT(i3, i4,t1,y1)

i5 = round(11.9*1612)
i6 = round(13.2*1612)
data=np.loadtxt('./f1612.lvm',delimiter='\t')
t2=data[:,0]
y2=data[:,1]
y2=y2-np.mean(y2)
f2,Y2 = FFT(i5, i6,t2,y2)

i7 = round(8.2*806)
i8 = round(10*806)
data=np.loadtxt('./f806.lvm',delimiter='\t')
t3=data[:,0]
y3=data[:,1]
y3=y3-np.mean(y3)
f3,Y3 = FFT(i7, i8,t3,y3)

#i9 = round(8.2*201)
#i10 = round(10.9*201)
#data=np.loadtxt('./f201.lvm',delimiter='\t')
#t4=data[:,0]
#y4=data[:,1]
#y4=y4-np.mean(y4)
#f4,Y4 = FFT(i9, i10,t4,y4)

plt.figure()
plt.plot(f,abs(Y), Label="101Hz")
#plt.plot(f1,abs(Y1), Label="403Hz")
plt.plot(f2,abs(Y2), Label="1612Hz")
plt.plot(f3,abs(Y3), Label="806Hz")
#plt.plot(f4,abs(Y4), Label="201Hz")
plt.legend(bbox_to_anchor=(1, 1), loc='upper right', borderaxespad=1.)
plt.title('FFT of Beam 1 Measurements')
plt.xlabel(r'$f~(Hz)$')
plt.xlim(0,500);

i1=round(6.15*100)
i2 = round(8.4*100)
data=np.loadtxt('./f100.lvm',delimiter='\t')
t=data[:,0]
y=data[:,1]
y=y-np.mean(y)
f,Y = FFT(i1, i2,t,y)

i3 = round(10.8*1600)
i4 = round(13.6*1600)
data=np.loadtxt('./f1600.lvm',delimiter='\t')
t1=data[:,0]
y1=data[:,1]
y1=y1-np.mean(y1)
f1,Y1 = FFT(i3, i4,t1,y1)

i5 = round(10.3*3200)
i6 = round(12*3200)
data=np.loadtxt('./f3200.lvm',delimiter='\t')
t2=data[:,0]
y2=data[:,1]
y2=y2-np.mean(y2)
f2,Y2 = FFT(i5, i6,t2,y2)

plt.figure()
plt.plot(f,abs(Y), label = "100Hz")
plt.plot(f1,abs(Y1), label = "1600Hz")
plt.plot(f2,abs(Y2), label = "3200Hz")
plt.title('FFT of Beam 3 Measurements')
plt.legend(bbox_to_anchor=(1, 1), loc='upper right', borderaxespad=1.)
plt.xlim(0,500)
plt.xlabel(r'$f~(Hz)$');
